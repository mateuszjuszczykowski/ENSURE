// <auto-generated />
using System;
using DATABASE_library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DATABASE_library.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DATABASE_library.Models.Data.DataModel", b =>
                {
                    b.Property<string>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("ApparentPower")
                        .HasColumnType("integer");

                    b.Property<double>("Current")
                        .HasColumnType("double precision");

                    b.Property<double>("Factor")
                        .HasColumnType("double precision");

                    b.Property<string>("MeasurementId")
                        .HasColumnType("text");

                    b.Property<int>("Power")
                        .HasColumnType("integer");

                    b.Property<int>("ReactivePower")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Today")
                        .HasColumnType("double precision");

                    b.Property<double>("Total")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("TotalStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Voltage")
                        .HasColumnType("integer");

                    b.Property<string>("deviceID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("_id");

                    b.HasIndex("MeasurementId");

                    b.ToTable("Data", (string)null);
                });

            modelBuilder.Entity("DATABASE_library.Models.Data.MeasurementModel", b =>
                {
                    b.Property<string>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartTime")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isFinished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("_id");

                    b.ToTable("Measurements", (string)null);
                });

            modelBuilder.Entity("DATABASE_library.Models.Data.RawDataModel", b =>
                {
                    b.Property<string>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("_id");

                    b.ToTable("RawData", (string)null);
                });

            modelBuilder.Entity("DATABASE_library.Models.User.UserModel", b =>
                {
                    b.Property<string>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<float>("EnergyPrice")
                        .HasColumnType("real");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("_id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DATABASE_library.Models.Data.DataModel", b =>
                {
                    b.HasOne("DATABASE_library.Models.Data.MeasurementModel", "Measurement")
                        .WithMany("Data")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("DATABASE_library.Models.Data.RawDataModel", b =>
                {
                    b.OwnsOne("DATABASE_library.Models.Data.Payload", "Payload", b1 =>
                        {
                            b1.Property<string>("RawDataModel_id")
                                .HasColumnType("text");

                            b1.Property<string>("Time")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("RawDataModel_id");

                            b1.ToTable("RawData");

                            b1.WithOwner()
                                .HasForeignKey("RawDataModel_id");

                            b1.OwnsOne("DATABASE_library.Models.Data.Energy", "ENERGY", b2 =>
                                {
                                    b2.Property<string>("PayloadRawDataModel_id")
                                        .HasColumnType("text");

                                    b2.Property<int>("ApparentPower")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Current")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Factor")
                                        .HasColumnType("double precision");

                                    b2.Property<int>("Period")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Power")
                                        .HasColumnType("integer");

                                    b2.Property<int>("ReactivePower")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Today")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Total")
                                        .HasColumnType("double precision");

                                    b2.Property<string>("TotalStartTime")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("Voltage")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Yesterday")
                                        .HasColumnType("double precision");

                                    b2.HasKey("PayloadRawDataModel_id");

                                    b2.ToTable("RawData");

                                    b2.WithOwner()
                                        .HasForeignKey("PayloadRawDataModel_id");
                                });

                            b1.Navigation("ENERGY")
                                .IsRequired();
                        });

                    b.Navigation("Payload")
                        .IsRequired();
                });

            modelBuilder.Entity("DATABASE_library.Models.Data.MeasurementModel", b =>
                {
                    b.Navigation("Data");
                });
#pragma warning restore 612, 618
        }
    }
}
